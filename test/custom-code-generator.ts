import { Definition } from "ts-json-schema-generator";
import path from "node:path";

export type GenerateValidatorCodeOptions = {
    apiFilePath: string;
    apiFileCode: string;
    validatorFilePath: string;
    schema: Definition;
};
export type CodeGenerator = (options: GenerateValidatorCodeOptions) => string;
export const generator = ({ apiFilePath, apiFileCode, schema }: GenerateValidatorCodeOptions) => {
    const apiFileName = path.basename(apiFilePath, ".ts");
    const isExportedTypeInApiTypes = (apiName: string) => {
        return (
            apiFileCode.includes(`export type ${apiName} =`) || apiFileCode.includes(`export interface ${apiName} {`)
        );
    };
    const banner = `// @ts-nocheck
// eslint-disable
// This file is generated by create-validator-ts
import Ajv from 'ajv';
import type * as apiTypes from './${apiFileName}';
`;
    const customPlugins = `// custom tags
ajv.addKeyword('boolOption', {
  modifying: false,
  compile: () => {
    return (data, currentDataPath, parentDataObject, propertyName) => {
      return data;
    };
  },
  errors: false
});
ajv.addKeyword('strOption', {
  modifying: false,
  compile: () => {
    return (data, currentDataPath, parentDataObject, propertyName) => {
      return data;
    };
  },
  errors: false
});
ajv.addKeyword('numberOption', {
  modifying: false,
  compile: () => {
    return (data, currentDataPath, parentDataObject, propertyName) => {
      return data;
    };
  },
  errors: false
});
`;
    // define SCHEMA to top, and we can refer it as "SCHEMA".
    // Note: { "$ref": "SCHEMA#/definitions/${apiName}" }
    const schemaDefinition = `const SCHEMA = ${JSON.stringify(schema, null, 4)};
const ajv = new Ajv({ removeAdditional: true }).addSchema(SCHEMA, "SCHEMA");`;
    const code = Object.entries(schema.definitions ?? {})
        .filter(([apiName]) => {
            return isExportedTypeInApiTypes(apiName);
        })
        .map(([apiName, _schema]) => {
            return `export function validate${apiName}(payload: unknown): apiTypes.${apiName} {
  if (!is${apiName}(payload)) {
    const error = new Error('invalid payload: ${apiName}');
    error.name = "ValidationError";
    throw error;
  }
  return payload;
}

export function is${apiName}(payload: unknown): payload is apiTypes.${apiName} {
  /** Schema is defined in {@link SCHEMA.definitions.${apiName} } **/
  const ajvValidate = ajv.compile({ "$ref": "SCHEMA#/definitions/${apiName}" });
  return ajvValidate(payload);
}`;
        })
        .join("\n\n");
    return `${banner}
${schemaDefinition}
${customPlugins}
${code}
`;
};

export const generatorOptions = {
    extraTags: ["boolOption", "strOption", "numberOption"]
};
